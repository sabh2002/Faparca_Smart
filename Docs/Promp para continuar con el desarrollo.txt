 
# üöÄ PROMPT MAESTRO - Continuaci√≥n Desarrollo Sistema OEE FAPARCA

## CONTEXTO DEL PROYECTO

Estoy desarrollando un **Sistema de Monitoreo OEE (Overall Equipment Effectiveness)** para una f√°brica de pasta en Venezuela. El proyecto tiene el **backend 100% completado** en Django REST Framework y necesito terminar el **frontend en Vue.js 3 + TypeScript**.

### üéØ Tu Misi√≥n
Completar el desarrollo del frontend, espec√≠ficamente:
1. Dashboard principal con KPIs
2. Formulario de registro de datos OEE
3. Sistema de reportes
4. Componentes reutilizables

---

## üìÅ ARCHIVOS CLAVE DEL PROYECTO

### 1Ô∏è‚É£ **Tipos TypeScript** (`/src/types/oee.ts`)
```typescript
// COMPARTIR ESTE ARCHIVO COMPLETO - Define todas las interfaces
export interface Area {
  id: number;
  nombre: string;
  codigo: string;
  tipo: 'empaque' | 'prensa';
  capacidad_teorica: number;
  capacidad_real: number;
  activa: boolean;
  created_at: string;
}

export interface Usuario {
  id: number;
  username: string;
  email: string;
  first_name: string;
  last_name: string;
  rol: 'administrador' | 'supervisor' | 'operador' | 'viewer';
  area_asignada?: number;
  area_nombre?: string;
  activo: boolean;
}

export interface RegistroOEE {
  id?: number;
  area: number;
  area_nombre?: string;
  fecha: string;
  turno: 'A' | 'B' | 'C';
  plan_produccion: number;
  produccion_real: number;
  hora_inicio: string;
  hora_fin: string;
  observaciones?: string;

  // Espec√≠ficos empaque
  formato_producto?: string;
  produccion_kg?: number;

  // Espec√≠ficos prensa
  lectura_inicial?: number;
  lectura_final?: number;
  paradas?: number;
  motivo_parada?: string;

  // Calculados
  disponibilidad: number;
  rendimiento: number;
  calidad: number;
  oee: number;
}

export interface DashboardData {
  oee_promedio: number;
  disponibilidad_promedio: number;
  rendimiento_promedio: number;
  calidad_promedio: number;
  total_registros: number;
  registros_hoy?: number;
  areas_activas?: number;
}
```

### 2Ô∏è‚É£ **Servicio API** (`/src/services/api.ts`)
```typescript
// COMPARTIR ESTE ARCHIVO - Configuraci√≥n de Axios
import axios from 'axios';

const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || 'http://localhost:8000/api';

export const api = axios.create({
  baseURL: API_BASE_URL,
  headers: { 'Content-Type': 'application/json' },
  timeout: 30000,
  withCredentials: true,
});

// Interceptor para agregar token
api.interceptors.request.use((config) => {
  const token = localStorage.getItem('auth_token');
  if (token) {
    try {
      const tokenData = JSON.parse(token);
      config.headers.Authorization = `Token ${tokenData.key || tokenData}`;
    } catch {
      config.headers.Authorization = `Token ${token}`;
    }
  }
  return config;
});

// Interceptor para manejar errores
api.interceptors.response.use(
  response => response,
  error => {
    if (error.response?.status === 401) {
      localStorage.removeItem('auth_token');
      localStorage.removeItem('user_data');
      window.location.href = '/login';
    }
    return Promise.reject(error);
  }
);

export default api;
```

### 3Ô∏è‚É£ **Store de Autenticaci√≥n** (`/src/stores/auth.ts`)
```typescript
// COMPARTIR PARTES RELEVANTES - Store Pinia
import { defineStore } from 'pinia';
import { ref, computed } from 'vue';
import AuthService from '@/services/auth';

export const useAuthStore = defineStore('auth', () => {
  const user = ref<Usuario | null>(null);
  const isLoading = ref(false);

  const isAuthenticated = computed(() => !!user.value);
  const userRole = computed(() => user.value?.rol);
  const canEdit = computed(() => {
    return ['administrador', 'supervisor', 'operador'].includes(userRole.value || '');
  });

  // M√©todos de autenticaci√≥n ya implementados
  async function login(credentials: LoginData) { /* ... */ }
  async function logout() { /* ... */ }

  return { user, isAuthenticated, userRole, canEdit, login, logout };
});
```

### 4Ô∏è‚É£ **Configuraci√≥n** (`/src/config/index.ts`)
```typescript
// COMPARTIR CONFIGURACI√ìN DE COLORES Y CONSTANTES
export const THEME = {
  colors: {
    primary: '#2563eb',
    success: '#10b981',
    warning: '#f59e0b',
    danger: '#ef4444',

    // OEE espec√≠ficos
    oeeExcellent: '#10b981', // >= 85%
    oeeGood: '#84cc16',      // >= 70%
    oeeRegular: '#f59e0b',   // >= 60%
    oeePoor: '#ef4444',      // < 60%
  }
};

export const API_ENDPOINTS = {
  AREAS: '/areas/',
  REGISTROS: '/registros/',
  DASHBOARD: '/registros/dashboard/',
};
```

---

## üèóÔ∏è ESTRUCTURA DEL PROYECTO

```
FRONTEND/
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ views/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Login.vue         ‚úÖ COMPLETADO
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Dashboard.vue     ‚ùå NECESITO QUE CREES
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Registro.vue      ‚ùå NECESITO QUE CREES
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Reportes.vue      ‚ùå NECESITO QUE CREES
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Administracion.vue ‚ùå NECESITO QUE CREES
‚îÇ   ‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ OEEIndicator.vue  ‚ùå NECESITO QUE CREES
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ AreaSelector.vue  ‚ùå NECESITO QUE CREES
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ TurnoSelector.vue ‚ùå NECESITO QUE CREES
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ KPICard.vue       ‚ùå NECESITO QUE CREES
‚îÇ   ‚îú‚îÄ‚îÄ services/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ api.ts            ‚úÖ Completado
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ auth.ts           ‚úÖ Completado
‚îÇ   ‚îú‚îÄ‚îÄ stores/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ auth.ts           ‚úÖ Completado
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ oee.ts            ‚ùå NECESITO QUE CREES
‚îÇ   ‚îî‚îÄ‚îÄ router/
‚îÇ       ‚îî‚îÄ‚îÄ index.ts          ‚úÖ Completado
```

---

## üìã ESPECIFICACIONES DETALLADAS

### 1Ô∏è‚É£ **DASHBOARD PRINCIPAL** (`Dashboard.vue`)

#### Requisitos Funcionales:
- **4 KPI Cards principales** en la parte superior:
  - OEE Promedio (color seg√∫n valor)
  - Disponibilidad Promedio
  - Rendimiento Promedio
  - Calidad Promedio

- **Tabla de √∫ltimos registros** (10 m√°s recientes):
  - Columnas: √Årea, Fecha, Turno, OEE, Usuario
  - Colores en OEE: verde(>85%), amarillo(70-84%), rojo(<70%)
  - Click en fila para ver detalle

- **Cards de estado por √°rea**:
  - Una card por cada √°rea activa
  - Mostrar √∫ltimo OEE registrado
  - Indicador visual tipo sem√°foro
  - Mini sparkline de tendencia (√∫ltimos 7 d√≠as)

- **Gr√°fico de l√≠nea de tendencia OEE**:
  - √öltimos 7 d√≠as
  - Una l√≠nea por √°rea
  - Interactivo con tooltips

#### C√≥digo Base para Empezar:
```vue
<template>
  <div class="min-h-screen bg-gray-50">
    <div class="container mx-auto px-4 py-8">
      <!-- Header -->
      <div class="mb-8">
        <h1 class="text-3xl font-bold text-gray-900">Dashboard OEE</h1>
        <p class="text-gray-600 mt-2">
          Monitoreo en tiempo real - {{ currentDate }}
        </p>
      </div>

      <!-- KPI Cards -->
      <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
        <KPICard
          v-for="kpi in kpis"
          :key="kpi.title"
          :title="kpi.title"
          :value="kpi.value"
          :suffix="kpi.suffix"
          :color="kpi.color"
          :trend="kpi.trend"
        />
      </div>

      <!-- √Åreas Status + Recent Records -->
      <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
        <!-- Areas Status -->
        <div class="lg:col-span-1">
          <h2 class="text-xl font-semibold mb-4">Estado por √Årea</h2>
          <div class="space-y-4">
            <AreaStatusCard
              v-for="area in areasStatus"
              :key="area.id"
              :area="area"
            />
          </div>
        </div>

        <!-- Recent Records Table -->
        <div class="lg:col-span-2">
          <h2 class="text-xl font-semibold mb-4">Registros Recientes</h2>
          <div class="bg-white rounded-lg shadow overflow-hidden">
            <table class="min-w-full">
              <!-- Implementar tabla -->
            </table>
          </div>
        </div>
      </div>

      <!-- Trends Chart -->
      <div class="mt-8 bg-white rounded-lg shadow p-6">
        <h2 class="text-xl font-semibold mb-4">Tendencia OEE - √öltimos 7 d√≠as</h2>
        <LineChart :data="chartData" :options="chartOptions" />
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, onMounted, computed } from 'vue';
import { format } from 'date-fns';
import { es } from 'date-fns/locale';
import api from '@/services/api';
import type { DashboardData, Area, RegistroOEE } from '@/types/oee';

// State
const dashboardData = ref<DashboardData | null>(null);
const recentRecords = ref<RegistroOEE[]>([]);
const areasStatus = ref<any[]>([]);
const isLoading = ref(true);

// Computed
const currentDate = computed(() =>
  format(new Date(), "EEEE, d 'de' MMMM yyyy", { locale: es })
);

const kpis = computed(() => {
  if (!dashboardData.value) return [];

  return [
    {
      title: 'OEE Promedio',
      value: dashboardData.value.oee_promedio,
      suffix: '%',
      color: getOEEColor(dashboardData.value.oee_promedio),
      trend: 'up'
    },
    // M√°s KPIs...
  ];
});

// Methods
const getOEEColor = (value: number) => {
  if (value >= 85) return 'success';
  if (value >= 70) return 'warning';
  return 'danger';
};

const loadDashboard = async () => {
  try {
    isLoading.value = true;

    // Cargar datos del dashboard
    const response = await api.get('/registros/dashboard/');
    dashboardData.value = response.data;

    // Cargar registros recientes
    const recordsResponse = await api.get('/registros/', {
      params: { limit: 10, ordering: '-fecha,-turno' }
    });
    recentRecords.value = recordsResponse.data.results;

    // Cargar estado de √°reas
    const areasResponse = await api.get('/areas/');
    // Procesar √°reas con su √∫ltimo OEE

  } catch (error) {
    console.error('Error cargando dashboard:', error);
  } finally {
    isLoading.value = false;
  }
};

// Lifecycle
onMounted(() => {
  loadDashboard();

  // Auto-refresh cada 30 segundos
  const interval = setInterval(loadDashboard, 30000);

  // Cleanup
  onUnmounted(() => clearInterval(interval));
});
</script>
```

### 2Ô∏è‚É£ **FORMULARIO DE REGISTRO** (`Registro.vue`)

#### Requisitos Funcionales:
- **Selector de √°rea** que determina campos a mostrar
- **Campos comunes**:
  - Fecha (default: hoy)
  - Turno (A/B/C basado en hora actual)
  - Plan de producci√≥n
  - Producci√≥n real
  - Hora inicio/fin
  - Observaciones

- **Campos para EMPAQUE**:
  - Formato de producto (select)
  - Producci√≥n en KG
  - Bultos producidos

- **Campos para PRENSA**:
  - Lectura inicial contador
  - Lectura final contador
  - N√∫mero de paradas
  - Motivo de paradas

- **C√°lculo en tiempo real**:
  - Mostrar OEE mientras se llenan campos
  - Preview antes de guardar
  - Validaciones instant√°neas

#### L√≥gica de C√°lculo:
```javascript
// DISPONIBILIDAD
const calcularDisponibilidad = (horaInicio, horaFin) => {
  const inicio = new Date(`2024-01-01 ${horaInicio}`);
  const fin = new Date(`2024-01-01 ${horaFin}`);

  // Si cruza medianoche
  if (fin < inicio) {
    fin.setDate(fin.getDate() + 1);
  }

  const horasReales = (fin - inicio) / (1000 * 60 * 60);
  return Math.min((horasReales / 8) * 100, 100);
};

// RENDIMIENTO
const calcularRendimiento = (tipo, produccionReal, plan, capacidadTeorica, horas) => {
  if (tipo === 'empaque') {
    return (produccionReal / plan) * 100;
  } else { // prensa
    const produccionTeorica = capacidadTeorica * horas;
    return (produccionReal / produccionTeorica) * 100;
  }
};

// OEE
const calcularOEE = (disponibilidad, rendimiento, calidad = 100) => {
  return (disponibilidad * rendimiento * calidad) / 10000;
};
```

### 3Ô∏è‚É£ **COMPONENTE OEE INDICATOR** (`OEEIndicator.vue`)

```vue
<template>
  <div class="relative inline-flex items-center justify-center">
    <!-- C√≠rculo de progreso SVG -->
    <svg class="transform -rotate-90 w-20 h-20">
      <circle
        cx="40"
        cy="40"
        r="36"
        stroke="currentColor"
        :stroke-width="strokeWidth"
        fill="none"
        class="text-gray-200"
      />
      <circle
        cx="40"
        cy="40"
        r="36"
        stroke="currentColor"
        :stroke-width="strokeWidth"
        fill="none"
        :stroke-dasharray="circumference"
        :stroke-dashoffset="strokeDashoffset"
        class="transition-all duration-500"
        :class="colorClass"
      />
    </svg>

    <!-- Valor en el centro -->
    <div class="absolute flex flex-col items-center">
      <span class="text-2xl font-bold" :class="textColorClass">
        {{ value }}%
      </span>
      <span class="text-xs text-gray-500">{{ label }}</span>
    </div>
  </div>
</template>

<script setup lang="ts">
import { computed } from 'vue';

const props = defineProps<{
  value: number;
  label?: string;
  strokeWidth?: number;
}>();

const circumference = computed(() => 2 * Math.PI * 36);

const strokeDashoffset = computed(() => {
  const offset = circumference.value - (props.value / 100) * circumference.value;
  return offset;
});

const colorClass = computed(() => {
  if (props.value >= 85) return 'text-green-500';
  if (props.value >= 70) return 'text-yellow-500';
  return 'text-red-500';
});

const textColorClass = computed(() => {
  if (props.value >= 85) return 'text-green-600';
  if (props.value >= 70) return 'text-yellow-600';
  return 'text-red-600';
});
</script>
```

---

## üé® PATRONES DE DISE√ëO A SEGUIR

### Composables para L√≥gica Reutilizable
```typescript
// composables/useOEECalculator.ts
export function useOEECalculator() {
  const calcularDisponibilidad = (inicio: string, fin: string): number => {
    // L√≥gica de c√°lculo
  };

  const calcularRendimiento = (
    tipo: 'empaque' | 'prensa',
    produccionReal: number,
    parametros: any
  ): number => {
    // L√≥gica seg√∫n tipo
  };

  return {
    calcularDisponibilidad,
    calcularRendimiento,
    calcularOEE
  };
}
```

### Store para Estado Global
```typescript
// stores/oee.ts
export const useOEEStore = defineStore('oee', () => {
  const registros = ref<RegistroOEE[]>([]);
  const areas = ref<Area[]>([]);

  const fetchRegistros = async (filters?: any) => {
    const response = await api.get('/registros/', { params: filters });
    registros.value = response.data.results;
  };

  const createRegistro = async (data: Partial<RegistroOEE>) => {
    const response = await api.post('/registros/', data);
    registros.value.unshift(response.data);
    return response.data;
  };

  return { registros, areas, fetchRegistros, createRegistro };
});
```

---

## üìä APIS ENDPOINTS DISPONIBLES

### √Åreas
```http
GET /api/areas/
Response: [
  {
    "id": 1,
    "nombre": "Empaque Cobra",
    "codigo": "EMP-01",
    "tipo": "empaque",
    "capacidad_teorica": 2500,
    "capacidad_real": 2300,
    "activa": true
  }
]

GET /api/areas/por_tipo/
Response: {
  "empaque": [...],
  "prensa": [...]
}
```

### Registros OEE
```http
POST /api/registros/
Body: {
  "area": 1,
  "fecha": "2024-01-08",
  "turno": "A",
  "plan_produccion": 2000,
  "produccion_real": 1850,
  "hora_inicio": "06:00",
  "hora_fin": "14:00",
  "formato_producto": "Spaghetti 500g",  // solo empaque
  "lectura_inicial": 1000,               // solo prensa
  "lectura_final": 2500                  // solo prensa
}

Response: {
  "id": 1,
  "area_nombre": "Empaque Cobra",
  "disponibilidad": 100,
  "rendimiento": 92.5,
  "calidad": 100,
  "oee": 92.5,
  ...campos enviados
}

GET /api/registros/dashboard/
Response: {
  "oee_promedio": 78.5,
  "disponibilidad_promedio": 95.2,
  "rendimiento_promedio": 82.4,
  "calidad_promedio": 100,
  "total_registros": 245,
  "registros_hoy": 6,
  "areas_activas": 5
}
```

---

## ‚öôÔ∏è CONFIGURACI√ìN DEL ENTORNO

### Variables de Entorno (.env)
```env
VITE_API_BASE_URL=http://localhost:8000/api
VITE_APP_TITLE=Sistema OEE FAPARCA
VITE_APP_VERSION=1.0.0
VITE_APP_ENV=development
```

### Dependencias Necesarias
```json
{
  "dependencies": {
    "vue": "^3.4.0",
    "vue-router": "^4.2.0",
    "pinia": "^2.1.0",
    "axios": "^1.6.0",
    "@vueuse/core": "^10.7.0",
    "date-fns": "^3.0.0",
    "chart.js": "^4.4.0",
    "vue-chartjs": "^5.3.0",
    "xlsx": "^0.18.0"
  },
  "devDependencies": {
    "@types/node": "^20.0.0",
    "typescript": "^5.0.0",
    "tailwindcss": "^3.4.0"
  }
}
```

---

## üß™ CASOS DE PRUEBA

### Dashboard
1. ‚úÖ Carga KPIs en menos de 2 segundos
2. ‚úÖ Actualiza autom√°ticamente cada 30 segundos
3. ‚úÖ Colores correctos seg√∫n valor OEE
4. ‚úÖ Tabla muestra 10 registros m√°s recientes
5. ‚úÖ Responsive en tablets (768px)

### Registro
1. ‚úÖ Formulario cambia seg√∫n tipo de √°rea
2. ‚úÖ Calcula OEE en tiempo real
3. ‚úÖ Valida que producci√≥n real > 0
4. ‚úÖ Valida lectura final > inicial (prensas)
5. ‚úÖ Guarda correctamente y actualiza dashboard

### Reportes
1. ‚úÖ Filtros funcionan correctamente
2. ‚úÖ Exporta a Excel con formato
3. ‚úÖ Gr√°ficos se actualizan con filtros
4. ‚úÖ Paginaci√≥n funciona
5. ‚úÖ Ordenamiento por columnas

---

## üöÄ INSTRUCCIONES DE IMPLEMENTACI√ìN

### Paso 1: Dashboard
1. Crear `Dashboard.vue` con el template base proporcionado
2. Implementar `KPICard.vue` component
3. Implementar llamadas API para datos
4. Agregar auto-refresh con `setInterval`
5. Integrar Chart.js para gr√°fico de tendencias

### Paso 2: Formulario Registro
1. Crear `Registro.vue` con formulario adaptativo
2. Implementar `AreaSelector.vue` y `TurnoSelector.vue`
3. Agregar l√≥gica de c√°lculo OEE
4. Implementar validaciones en tiempo real
5. Conectar con API POST `/registros/`

### Paso 3: Reportes
1. Crear `Reportes.vue` con filtros
2. Implementar tabla con paginaci√≥n
3. Agregar gr√°ficos comparativos
4. Implementar exportaci√≥n Excel con SheetJS
5. Agregar estad√≠sticas agregadas

### Paso 4: Testing
1. Probar cada componente individualmente
2. Verificar responsive design
3. Probar con datos reales
4. Verificar performance
5. Testing en tablets objetivo

---

## üìù NOTAS IMPORTANTES

1. **El backend est√° 100% funcional** - No necesitas modificarlo
2. **Autenticaci√≥n ya funciona** - Token en headers autom√°ticamente
3. **Usa Tailwind CSS** - No escribas CSS personalizado
4. **TypeScript estricto** - Define tipos para todo
5. **Composition API** - Usa `<script setup>` siempre
6. **Manejo de errores** - Try/catch en todas las llamadas API
7. **Loading states** - Muestra spinners mientras carga
8. **Responsive** - Mobile-first, optimizado para tablets

---

## üéØ CRITERIOS DE √âXITO

El frontend estar√° completo cuando:
- [ ] Dashboard muestra datos en tiempo real
- [ ] Formulario permite registrar datos sin errores
- [ ] Reportes generan an√°lisis √∫tiles
- [ ] Exportaci√≥n a Excel funciona
- [ ] Interface es intuitiva y responsive
- [ ] No hay errores en consola
- [ ] Performance < 3 segundos carga inicial
- [ ] Auto-refresh no causa memory leaks

---

## üí¨ COMUNICACI√ìN ESPERADA

Cuando implementes, por favor:
1. Muestra el c√≥digo completo, no fragmentos
2. Explica decisiones de dise√±o importantes
3. Se√±ala cualquier asunci√≥n que hagas
4. Sugiere mejoras si las ves
5. Pregunta si algo no est√° claro

**¬°Empecemos con el Dashboard.vue completo!**
